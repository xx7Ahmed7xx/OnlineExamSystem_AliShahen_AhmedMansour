@page "/account/login"
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using OnlineExamSystem_AliShahen_AhmedMansour.Services
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthService
@inject AuthenticationStateProvider AuthStateProvider

<div class="login-card">
    <div class="login-header">
        <h3>Sign In</h3>
    </div>

    <div class="login-body">
        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <div class="form-group">
                <label>
                    Remember me? <InputCheckbox @bind-Value="loginModel.RememberMe" />
                </label>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <button type="submit" class="btn btn-primary sign-in-button">Sign In</button>
        </EditForm>

        <div class="login-links">
            <a href="account/register">Register as a new user</a>
            <a href="account/forgot-password">Forgot your password?</a>
        </div>
    </div>
</div>

<style>
    .login-card {
        max-width: 400px;
        margin: 2rem auto;
        background: white;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .login-header {
        background: #007bff;
        color: white;
        padding: 1rem;
        text-align: center;
        border-radius: 4px 4px 0 0;
    }

    .login-header h3 {
        margin: 0;
        font-size: 1.5rem;
    }

    .login-body {
        padding: 2rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
    }

    .form-control {
        width: 100%;
        padding: 0.375rem 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        background-color: #f8f9fa;
    }

    .sign-in-button {
        width: 100%;
        margin-top: 1rem;
    }

    .login-links {
        margin-top: 1rem;
        text-align: center;
    }

    .login-links a {
        display: block;
        margin-top: 0.5rem;
        color: #007bff;
        text-decoration: none;
    }

    .login-links a:hover {
        text-decoration: underline;
    }
</style>

@code {
    private LoginModel loginModel = new();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            var result = await AuthService.LoginAsync(loginModel.Email, loginModel.Password, loginModel.RememberMe);
            if (result.Succeeded)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = result.Error ?? "Login failed. Please check your credentials and try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
        }
    }

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }

        public bool RememberMe { get; set; }
    }
} 